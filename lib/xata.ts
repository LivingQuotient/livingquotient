// Generated by Xata Codegen 0.30.1. Please do not edit.
import "dotenv/config";
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "cities",
    checkConstraints: {
      top_50_cities_xata_id_length_xata_id: {
        name: "top_50_cities_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_top_50_cities_xata_id_key: {
        name: "_pgroll_new_top_50_cities_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      { name: "country", type: "text" },
      { name: "cover_image_url", type: "text" },
      { name: "is_published", type: "bool" },
      { name: "latitude", type: "float" },
      { name: "longitude", type: "float" },
      { name: "name", type: "text" },
      { name: "population", type: "int" },
      { name: "region", type: "text" },
      { name: "slug", type: "text" },
      { name: "xata_createdat", type: "datetime", notNull: true, defaultValue: "now()" },
      { name: "xata_id", type: "text", notNull: true, unique: true, defaultValue: "('rec_'::text || (xata_private.xid())::text)" },
      { name: "xata_updatedat", type: "datetime", notNull: true, defaultValue: "now()" },
      { name: "xata_version", type: "int", notNull: true, defaultValue: "0" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;
export type Cities = InferredTypes["cities"];
export type CitiesRecord = Cities & XataRecord;
export type DatabaseSchema = { cities: CitiesRecord };

const DatabaseClient = buildClient();

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super(
      {
        apiKey: process.env.XATA_API_KEY,
        branch: process.env.XATA_BRANCH,
        databaseURL: process.env.XATA_DB_URL,
        ...options,
      },
      tables
    );
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;
  instance = new XataClient();
  return instance;
};
